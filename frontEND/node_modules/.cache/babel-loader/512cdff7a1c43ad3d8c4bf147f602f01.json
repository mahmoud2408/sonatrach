{"ast":null,"code":"import axios from \"axios\";\nconst apiClient = axios.create({\n  baseURL: \"http://localhost:5005/api/auth\",\n  // Base URL pour les endpoints d'authentification\n  timeout: 5000,\n  withCredentials: true // Pour envoyer/recevoir les cookies de session\n});\nconst API_URL = \"http://localhost:5005/api\";\n\n/**\n * Crée un nouveau profil utilisateur.\n * @param {Object} userData - Les données de l'utilisateur (firstName, lastName, etc.).\n * @returns {Promise<Object>} La réponse du serveur en JSON.\n */\nexport async function createProfile(userData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/profil`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      // pour envoyer/recevoir les cookies (sessions)\n      body: JSON.stringify(userData)\n    });\n\n    // Tenter de parser la réponse\n    const data = await response.json();\n    if (!response.ok) {\n      // Si le serveur renvoie un statut d'erreur, on lève une exception\n      throw new Error(data.error || \"Erreur lors de la création du profil.\");\n    }\n    return data;\n  } catch (error) {\n    // On renvoie l'erreur pour que le composant qui appelle la fonction puisse la gérer\n    throw error;\n  }\n}\n\n/**\n * Connecte un utilisateur existant.\n * @param {Object} loginData - Les données de connexion (login, password, rememberMe).\n * @returns {Promise<Object>} La réponse du serveur en JSON.\n */\nexport async function loginUser(loginData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(loginData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Erreur lors de la connexion.\");\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function getActivities() {\n  try {\n    const response = await axios.get(\"http://localhost:5005/api/activities\", {\n      withCredentials: true,\n      headers: {\n        \"Cache-Control\": \"no-cache\"\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\nexport function getMembers() {\n  return apiClient.get(\"/members\");\n}","map":{"version":3,"names":["axios","apiClient","create","baseURL","timeout","withCredentials","API_URL","createProfile","userData","response","fetch","method","headers","credentials","body","JSON","stringify","data","json","ok","Error","error","loginUser","loginData","getActivities","get","getMembers"],"sources":["C:/Users/hp/Downloads/sonatrach_2/frontEND/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst apiClient = axios.create({\n  baseURL: \"http://localhost:5005/api/auth\", // Base URL pour les endpoints d'authentification\n  timeout: 5000,\n  withCredentials: true, // Pour envoyer/recevoir les cookies de session\n});\nconst API_URL = \"http://localhost:5005/api\";\n\n/**\n * Crée un nouveau profil utilisateur.\n * @param {Object} userData - Les données de l'utilisateur (firstName, lastName, etc.).\n * @returns {Promise<Object>} La réponse du serveur en JSON.\n */\nexport async function createProfile(userData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/profil`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\", // pour envoyer/recevoir les cookies (sessions)\n      body: JSON.stringify(userData),\n    });\n\n    // Tenter de parser la réponse\n    const data = await response.json();\n\n    if (!response.ok) {\n      // Si le serveur renvoie un statut d'erreur, on lève une exception\n      throw new Error(data.error || \"Erreur lors de la création du profil.\");\n    }\n    return data;\n  } catch (error) {\n    // On renvoie l'erreur pour que le composant qui appelle la fonction puisse la gérer\n    throw error;\n  }\n}\n\n/**\n * Connecte un utilisateur existant.\n * @param {Object} loginData - Les données de connexion (login, password, rememberMe).\n * @returns {Promise<Object>} La réponse du serveur en JSON.\n */\nexport async function loginUser(loginData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify(loginData),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.error || \"Erreur lors de la connexion.\");\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n\nexport async function getActivities() {\n  try {\n    const response = await axios.get(\"http://localhost:5005/api/activities\", {\n      withCredentials: true,\n      headers: { \"Cache-Control\": \"no-cache\" }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\n\n\nexport function getMembers() {\n  return apiClient.get(\"/members\");\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,gCAAgC;EAAE;EAC3CC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;AACF,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,aAAaA,CAACC,QAAQ,EAAE;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,cAAc,EAAE;MACrDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,WAAW,EAAE,SAAS;MAAE;MACxBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IAC/B,CAAC,CAAC;;IAEF;IACA,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB;MACA,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uCAAuC,CAAC;IACxE;IACA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACA,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,SAASA,CAACC,SAAS,EAAE;EACzC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAa,EAAE;MACpDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,SAAS;IAChC,CAAC,CAAC;IAEF,MAAMN,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,8BAA8B,CAAC;IAC/D;IACA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAGA,OAAO,eAAeG,aAAaA,CAAA,EAAG;EACpC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMT,KAAK,CAACyB,GAAG,CAAC,sCAAsC,EAAE;MACvEpB,eAAe,EAAE,IAAI;MACrBO,OAAO,EAAE;QAAE,eAAe,EAAE;MAAW;IACzC,CAAC,CAAC;IACF,OAAOH,QAAQ;EACjB,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAGA,OAAO,SAASK,UAAUA,CAAA,EAAG;EAC3B,OAAOzB,SAAS,CAACwB,GAAG,CAAC,UAAU,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module"}