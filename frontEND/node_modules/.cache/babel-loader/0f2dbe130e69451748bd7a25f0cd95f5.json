{"ast":null,"code":"// frontend/src/api.js\n\n// Définissez l'URL de base de votre API.\n// Vous pouvez utiliser une variable d'environnement (ex: REACT_APP_API_URL)\n// ou laisser une valeur en dur comme ici.\nconst API_URL = \"http://localhost:5005/api\";\n\n/**\r\n * Crée un nouveau profil utilisateur.\r\n * @param {Object} userData - Les données de l'utilisateur (firstName, lastName, etc.).\r\n * @returns {Promise<Object>} La réponse du serveur en JSON.\r\n */\nexport async function createProfile(userData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/profil`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      // pour envoyer/recevoir les cookies (sessions)\n      body: JSON.stringify(userData)\n    });\n\n    // Tenter de parser la réponse\n    const data = await response.json();\n    if (!response.ok) {\n      // Si le serveur renvoie un statut d'erreur, on lève une exception\n      throw new Error(data.error || \"Erreur lors de la création du profil.\");\n    }\n    return data;\n  } catch (error) {\n    // On renvoie l'erreur pour que le composant qui appelle la fonction puisse la gérer\n    throw error;\n  }\n}\n\n/**\r\n * Connecte un utilisateur existant.\r\n * @param {Object} loginData - Les données de connexion (login, password, rememberMe).\r\n * @returns {Promise<Object>} La réponse du serveur en JSON.\r\n */\nexport async function loginUser(loginData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(loginData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Erreur lors de la connexion.\");\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"names":["API_URL","createProfile","userData","response","fetch","method","headers","credentials","body","JSON","stringify","data","json","ok","Error","error","loginUser","loginData"],"sources":["C:/Users/hp/sona-app/frontEND/src/services/api.js"],"sourcesContent":["// frontend/src/api.js\r\n\r\n// Définissez l'URL de base de votre API.\r\n// Vous pouvez utiliser une variable d'environnement (ex: REACT_APP_API_URL)\r\n// ou laisser une valeur en dur comme ici.\r\nconst API_URL = \"http://localhost:5005/api\";\r\n\r\n/**\r\n * Crée un nouveau profil utilisateur.\r\n * @param {Object} userData - Les données de l'utilisateur (firstName, lastName, etc.).\r\n * @returns {Promise<Object>} La réponse du serveur en JSON.\r\n */\r\nexport async function createProfile(userData) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/profil`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\", // pour envoyer/recevoir les cookies (sessions)\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    // Tenter de parser la réponse\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      // Si le serveur renvoie un statut d'erreur, on lève une exception\r\n      throw new Error(data.error || \"Erreur lors de la création du profil.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    // On renvoie l'erreur pour que le composant qui appelle la fonction puisse la gérer\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Connecte un utilisateur existant.\r\n * @param {Object} loginData - Les données de connexion (login, password, rememberMe).\r\n * @returns {Promise<Object>} La réponse du serveur en JSON.\r\n */\r\nexport async function loginUser(loginData) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(loginData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || \"Erreur lors de la connexion.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,MAAMA,OAAO,GAAG,2BAA2B;;AAE3C;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,aAAaA,CAACC,QAAQ,EAAE;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,cAAc,EAAE;MACrDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,WAAW,EAAE,SAAS;MAAE;MACxBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IAC/B,CAAC,CAAC;;IAEF;IACA,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB;MACA,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uCAAuC,CAAC;IACxE;IACA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACA,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,SAASA,CAACC,SAAS,EAAE;EACzC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAa,EAAE;MACpDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,SAAS;IAChC,CAAC,CAAC;IAEF,MAAMN,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,8BAA8B,CAAC;IAC/D;IACA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}