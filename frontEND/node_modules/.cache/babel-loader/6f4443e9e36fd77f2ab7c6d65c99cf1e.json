{"ast":null,"code":"// frontend/src/API.js\n\n// Définissez l'URL de base de l'API via une variable d'environnement ou une valeur par défaut\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5005/api\";\n\n/**\r\n * Envoie une requête pour créer un nouveau profil utilisateur.\r\n * @param {Object} userData - Les données de l'utilisateur (firstName, lastName, email, mobile, username, password, isOver16, acceptTerms, acceptNotifications).\r\n * @returns {Promise<Object>} La réponse du serveur.\r\n */\nexport async function registerUser(userData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      // Pour gérer les cookies de session\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Erreur lors de la création du profil.\");\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\r\n * Envoie une requête pour connecter un utilisateur.\r\n * @param {Object} loginData - Les données de connexion (login, password, rememberMe).\r\n * @returns {Promise<Object>} La réponse du serveur.\r\n */\nexport async function loginUser(loginData) {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      // Pour gérer les cookies de session\n      body: JSON.stringify(loginData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Erreur lors de la connexion.\");\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","fetch","method","headers","credentials","body","JSON","stringify","data","json","ok","Error","error","loginUser","loginData"],"sources":["C:/Users/hp/sona-app/frontEND/src/services/api.js"],"sourcesContent":["// frontend/src/API.js\r\n\r\n// Définissez l'URL de base de l'API via une variable d'environnement ou une valeur par défaut\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5005/api\";\r\n\r\n/**\r\n * Envoie une requête pour créer un nouveau profil utilisateur.\r\n * @param {Object} userData - Les données de l'utilisateur (firstName, lastName, email, mobile, username, password, isOver16, acceptTerms, acceptNotifications).\r\n * @returns {Promise<Object>} La réponse du serveur.\r\n */\r\nexport async function registerUser(userData) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/register`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\", // Pour gérer les cookies de session\r\n      body: JSON.stringify(userData),\r\n    });\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.error || \"Erreur lors de la création du profil.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Envoie une requête pour connecter un utilisateur.\r\n * @param {Object} loginData - Les données de connexion (login, password, rememberMe).\r\n * @returns {Promise<Object>} La réponse du serveur.\r\n */\r\nexport async function loginUser(loginData) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\", // Pour gérer les cookies de session\r\n      body: JSON.stringify(loginData),\r\n    });\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.error || \"Erreur lors de la connexion.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,YAAYA,CAACC,QAAQ,EAAE;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,gBAAgB,EAAE;MACvDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,WAAW,EAAE,SAAS;MAAE;MACxBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IAC/B,CAAC,CAAC;IACF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uCAAuC,CAAC;IACxE;IACA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,SAASA,CAACC,SAAS,EAAE;EACzC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,EAAE;MACpDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,WAAW,EAAE,SAAS;MAAE;MACxBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,SAAS;IAChC,CAAC,CAAC;IACF,MAAMN,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,8BAA8B,CAAC;IAC/D;IACA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}